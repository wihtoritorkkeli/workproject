
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Kayttaja
 * 
 */
export type Kayttaja = $Result.DefaultSelection<Prisma.$KayttajaPayload>
/**
 * Model Liidit
 * 
 */
export type Liidit = $Result.DefaultSelection<Prisma.$LiiditPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Kayttajas
 * const kayttajas = await prisma.kayttaja.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Kayttajas
   * const kayttajas = await prisma.kayttaja.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.kayttaja`: Exposes CRUD operations for the **Kayttaja** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kayttajas
    * const kayttajas = await prisma.kayttaja.findMany()
    * ```
    */
  get kayttaja(): Prisma.KayttajaDelegate<ExtArgs>;

  /**
   * `prisma.liidit`: Exposes CRUD operations for the **Liidit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Liidits
    * const liidits = await prisma.liidit.findMany()
    * ```
    */
  get liidit(): Prisma.LiiditDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Kayttaja: 'Kayttaja',
    Liidit: 'Liidit'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'kayttaja' | 'liidit'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Kayttaja: {
        payload: Prisma.$KayttajaPayload<ExtArgs>
        fields: Prisma.KayttajaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KayttajaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KayttajaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>
          }
          findFirst: {
            args: Prisma.KayttajaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KayttajaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>
          }
          findMany: {
            args: Prisma.KayttajaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>[]
          }
          create: {
            args: Prisma.KayttajaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>
          }
          delete: {
            args: Prisma.KayttajaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>
          }
          update: {
            args: Prisma.KayttajaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>
          }
          deleteMany: {
            args: Prisma.KayttajaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KayttajaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KayttajaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KayttajaPayload>
          }
          aggregate: {
            args: Prisma.KayttajaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKayttaja>
          }
          groupBy: {
            args: Prisma.KayttajaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KayttajaGroupByOutputType>[]
          }
          count: {
            args: Prisma.KayttajaCountArgs<ExtArgs>,
            result: $Utils.Optional<KayttajaCountAggregateOutputType> | number
          }
        }
      }
      Liidit: {
        payload: Prisma.$LiiditPayload<ExtArgs>
        fields: Prisma.LiiditFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LiiditFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LiiditFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>
          }
          findFirst: {
            args: Prisma.LiiditFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LiiditFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>
          }
          findMany: {
            args: Prisma.LiiditFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>[]
          }
          create: {
            args: Prisma.LiiditCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>
          }
          delete: {
            args: Prisma.LiiditDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>
          }
          update: {
            args: Prisma.LiiditUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>
          }
          deleteMany: {
            args: Prisma.LiiditDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LiiditUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LiiditUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LiiditPayload>
          }
          aggregate: {
            args: Prisma.LiiditAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLiidit>
          }
          groupBy: {
            args: Prisma.LiiditGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LiiditGroupByOutputType>[]
          }
          count: {
            args: Prisma.LiiditCountArgs<ExtArgs>,
            result: $Utils.Optional<LiiditCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Kayttaja
   */

  export type AggregateKayttaja = {
    _count: KayttajaCountAggregateOutputType | null
    _avg: KayttajaAvgAggregateOutputType | null
    _sum: KayttajaSumAggregateOutputType | null
    _min: KayttajaMinAggregateOutputType | null
    _max: KayttajaMaxAggregateOutputType | null
  }

  export type KayttajaAvgAggregateOutputType = {
    id: number | null
  }

  export type KayttajaSumAggregateOutputType = {
    id: number | null
  }

  export type KayttajaMinAggregateOutputType = {
    id: number | null
    kayttajatunnus: string | null
    salasana: string | null
    admin: boolean | null
  }

  export type KayttajaMaxAggregateOutputType = {
    id: number | null
    kayttajatunnus: string | null
    salasana: string | null
    admin: boolean | null
  }

  export type KayttajaCountAggregateOutputType = {
    id: number
    kayttajatunnus: number
    salasana: number
    admin: number
    _all: number
  }


  export type KayttajaAvgAggregateInputType = {
    id?: true
  }

  export type KayttajaSumAggregateInputType = {
    id?: true
  }

  export type KayttajaMinAggregateInputType = {
    id?: true
    kayttajatunnus?: true
    salasana?: true
    admin?: true
  }

  export type KayttajaMaxAggregateInputType = {
    id?: true
    kayttajatunnus?: true
    salasana?: true
    admin?: true
  }

  export type KayttajaCountAggregateInputType = {
    id?: true
    kayttajatunnus?: true
    salasana?: true
    admin?: true
    _all?: true
  }

  export type KayttajaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kayttaja to aggregate.
     */
    where?: KayttajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kayttajas to fetch.
     */
    orderBy?: KayttajaOrderByWithRelationInput | KayttajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KayttajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kayttajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kayttajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kayttajas
    **/
    _count?: true | KayttajaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KayttajaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KayttajaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KayttajaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KayttajaMaxAggregateInputType
  }

  export type GetKayttajaAggregateType<T extends KayttajaAggregateArgs> = {
        [P in keyof T & keyof AggregateKayttaja]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKayttaja[P]>
      : GetScalarType<T[P], AggregateKayttaja[P]>
  }




  export type KayttajaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KayttajaWhereInput
    orderBy?: KayttajaOrderByWithAggregationInput | KayttajaOrderByWithAggregationInput[]
    by: KayttajaScalarFieldEnum[] | KayttajaScalarFieldEnum
    having?: KayttajaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KayttajaCountAggregateInputType | true
    _avg?: KayttajaAvgAggregateInputType
    _sum?: KayttajaSumAggregateInputType
    _min?: KayttajaMinAggregateInputType
    _max?: KayttajaMaxAggregateInputType
  }

  export type KayttajaGroupByOutputType = {
    id: number
    kayttajatunnus: string
    salasana: string
    admin: boolean
    _count: KayttajaCountAggregateOutputType | null
    _avg: KayttajaAvgAggregateOutputType | null
    _sum: KayttajaSumAggregateOutputType | null
    _min: KayttajaMinAggregateOutputType | null
    _max: KayttajaMaxAggregateOutputType | null
  }

  type GetKayttajaGroupByPayload<T extends KayttajaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KayttajaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KayttajaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KayttajaGroupByOutputType[P]>
            : GetScalarType<T[P], KayttajaGroupByOutputType[P]>
        }
      >
    >


  export type KayttajaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kayttajatunnus?: boolean
    salasana?: boolean
    admin?: boolean
  }, ExtArgs["result"]["kayttaja"]>

  export type KayttajaSelectScalar = {
    id?: boolean
    kayttajatunnus?: boolean
    salasana?: boolean
    admin?: boolean
  }


  export type $KayttajaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kayttaja"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kayttajatunnus: string
      salasana: string
      admin: boolean
    }, ExtArgs["result"]["kayttaja"]>
    composites: {}
  }


  type KayttajaGetPayload<S extends boolean | null | undefined | KayttajaDefaultArgs> = $Result.GetResult<Prisma.$KayttajaPayload, S>

  type KayttajaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KayttajaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: KayttajaCountAggregateInputType | true
    }

  export interface KayttajaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kayttaja'], meta: { name: 'Kayttaja' } }
    /**
     * Find zero or one Kayttaja that matches the filter.
     * @param {KayttajaFindUniqueArgs} args - Arguments to find a Kayttaja
     * @example
     * // Get one Kayttaja
     * const kayttaja = await prisma.kayttaja.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KayttajaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KayttajaFindUniqueArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kayttaja that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KayttajaFindUniqueOrThrowArgs} args - Arguments to find a Kayttaja
     * @example
     * // Get one Kayttaja
     * const kayttaja = await prisma.kayttaja.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KayttajaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KayttajaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kayttaja that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaFindFirstArgs} args - Arguments to find a Kayttaja
     * @example
     * // Get one Kayttaja
     * const kayttaja = await prisma.kayttaja.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KayttajaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KayttajaFindFirstArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kayttaja that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaFindFirstOrThrowArgs} args - Arguments to find a Kayttaja
     * @example
     * // Get one Kayttaja
     * const kayttaja = await prisma.kayttaja.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KayttajaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KayttajaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kayttajas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kayttajas
     * const kayttajas = await prisma.kayttaja.findMany()
     * 
     * // Get first 10 Kayttajas
     * const kayttajas = await prisma.kayttaja.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kayttajaWithIdOnly = await prisma.kayttaja.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KayttajaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KayttajaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kayttaja.
     * @param {KayttajaCreateArgs} args - Arguments to create a Kayttaja.
     * @example
     * // Create one Kayttaja
     * const Kayttaja = await prisma.kayttaja.create({
     *   data: {
     *     // ... data to create a Kayttaja
     *   }
     * })
     * 
    **/
    create<T extends KayttajaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KayttajaCreateArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Kayttaja.
     * @param {KayttajaDeleteArgs} args - Arguments to delete one Kayttaja.
     * @example
     * // Delete one Kayttaja
     * const Kayttaja = await prisma.kayttaja.delete({
     *   where: {
     *     // ... filter to delete one Kayttaja
     *   }
     * })
     * 
    **/
    delete<T extends KayttajaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KayttajaDeleteArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kayttaja.
     * @param {KayttajaUpdateArgs} args - Arguments to update one Kayttaja.
     * @example
     * // Update one Kayttaja
     * const kayttaja = await prisma.kayttaja.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KayttajaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KayttajaUpdateArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kayttajas.
     * @param {KayttajaDeleteManyArgs} args - Arguments to filter Kayttajas to delete.
     * @example
     * // Delete a few Kayttajas
     * const { count } = await prisma.kayttaja.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KayttajaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KayttajaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kayttajas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kayttajas
     * const kayttaja = await prisma.kayttaja.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KayttajaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KayttajaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kayttaja.
     * @param {KayttajaUpsertArgs} args - Arguments to update or create a Kayttaja.
     * @example
     * // Update or create a Kayttaja
     * const kayttaja = await prisma.kayttaja.upsert({
     *   create: {
     *     // ... data to create a Kayttaja
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kayttaja we want to update
     *   }
     * })
    **/
    upsert<T extends KayttajaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KayttajaUpsertArgs<ExtArgs>>
    ): Prisma__KayttajaClient<$Result.GetResult<Prisma.$KayttajaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kayttajas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaCountArgs} args - Arguments to filter Kayttajas to count.
     * @example
     * // Count the number of Kayttajas
     * const count = await prisma.kayttaja.count({
     *   where: {
     *     // ... the filter for the Kayttajas we want to count
     *   }
     * })
    **/
    count<T extends KayttajaCountArgs>(
      args?: Subset<T, KayttajaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KayttajaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kayttaja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KayttajaAggregateArgs>(args: Subset<T, KayttajaAggregateArgs>): Prisma.PrismaPromise<GetKayttajaAggregateType<T>>

    /**
     * Group by Kayttaja.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KayttajaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KayttajaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KayttajaGroupByArgs['orderBy'] }
        : { orderBy?: KayttajaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KayttajaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKayttajaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kayttaja model
   */
  readonly fields: KayttajaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kayttaja.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KayttajaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kayttaja model
   */ 
  interface KayttajaFieldRefs {
    readonly id: FieldRef<"Kayttaja", 'Int'>
    readonly kayttajatunnus: FieldRef<"Kayttaja", 'String'>
    readonly salasana: FieldRef<"Kayttaja", 'String'>
    readonly admin: FieldRef<"Kayttaja", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Kayttaja findUnique
   */
  export type KayttajaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * Filter, which Kayttaja to fetch.
     */
    where: KayttajaWhereUniqueInput
  }


  /**
   * Kayttaja findUniqueOrThrow
   */
  export type KayttajaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * Filter, which Kayttaja to fetch.
     */
    where: KayttajaWhereUniqueInput
  }


  /**
   * Kayttaja findFirst
   */
  export type KayttajaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * Filter, which Kayttaja to fetch.
     */
    where?: KayttajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kayttajas to fetch.
     */
    orderBy?: KayttajaOrderByWithRelationInput | KayttajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kayttajas.
     */
    cursor?: KayttajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kayttajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kayttajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kayttajas.
     */
    distinct?: KayttajaScalarFieldEnum | KayttajaScalarFieldEnum[]
  }


  /**
   * Kayttaja findFirstOrThrow
   */
  export type KayttajaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * Filter, which Kayttaja to fetch.
     */
    where?: KayttajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kayttajas to fetch.
     */
    orderBy?: KayttajaOrderByWithRelationInput | KayttajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kayttajas.
     */
    cursor?: KayttajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kayttajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kayttajas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kayttajas.
     */
    distinct?: KayttajaScalarFieldEnum | KayttajaScalarFieldEnum[]
  }


  /**
   * Kayttaja findMany
   */
  export type KayttajaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * Filter, which Kayttajas to fetch.
     */
    where?: KayttajaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kayttajas to fetch.
     */
    orderBy?: KayttajaOrderByWithRelationInput | KayttajaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kayttajas.
     */
    cursor?: KayttajaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kayttajas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kayttajas.
     */
    skip?: number
    distinct?: KayttajaScalarFieldEnum | KayttajaScalarFieldEnum[]
  }


  /**
   * Kayttaja create
   */
  export type KayttajaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * The data needed to create a Kayttaja.
     */
    data: XOR<KayttajaCreateInput, KayttajaUncheckedCreateInput>
  }


  /**
   * Kayttaja update
   */
  export type KayttajaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * The data needed to update a Kayttaja.
     */
    data: XOR<KayttajaUpdateInput, KayttajaUncheckedUpdateInput>
    /**
     * Choose, which Kayttaja to update.
     */
    where: KayttajaWhereUniqueInput
  }


  /**
   * Kayttaja updateMany
   */
  export type KayttajaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kayttajas.
     */
    data: XOR<KayttajaUpdateManyMutationInput, KayttajaUncheckedUpdateManyInput>
    /**
     * Filter which Kayttajas to update
     */
    where?: KayttajaWhereInput
  }


  /**
   * Kayttaja upsert
   */
  export type KayttajaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * The filter to search for the Kayttaja to update in case it exists.
     */
    where: KayttajaWhereUniqueInput
    /**
     * In case the Kayttaja found by the `where` argument doesn't exist, create a new Kayttaja with this data.
     */
    create: XOR<KayttajaCreateInput, KayttajaUncheckedCreateInput>
    /**
     * In case the Kayttaja was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KayttajaUpdateInput, KayttajaUncheckedUpdateInput>
  }


  /**
   * Kayttaja delete
   */
  export type KayttajaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
    /**
     * Filter which Kayttaja to delete.
     */
    where: KayttajaWhereUniqueInput
  }


  /**
   * Kayttaja deleteMany
   */
  export type KayttajaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kayttajas to delete
     */
    where?: KayttajaWhereInput
  }


  /**
   * Kayttaja without action
   */
  export type KayttajaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kayttaja
     */
    select?: KayttajaSelect<ExtArgs> | null
  }



  /**
   * Model Liidit
   */

  export type AggregateLiidit = {
    _count: LiiditCountAggregateOutputType | null
    _avg: LiiditAvgAggregateOutputType | null
    _sum: LiiditSumAggregateOutputType | null
    _min: LiiditMinAggregateOutputType | null
    _max: LiiditMaxAggregateOutputType | null
  }

  export type LiiditAvgAggregateOutputType = {
    id: number | null
  }

  export type LiiditSumAggregateOutputType = {
    id: number | null
  }

  export type LiiditMinAggregateOutputType = {
    id: number | null
    kayttajatunnus: string | null
    liidi: string | null
  }

  export type LiiditMaxAggregateOutputType = {
    id: number | null
    kayttajatunnus: string | null
    liidi: string | null
  }

  export type LiiditCountAggregateOutputType = {
    id: number
    kayttajatunnus: number
    liidi: number
    _all: number
  }


  export type LiiditAvgAggregateInputType = {
    id?: true
  }

  export type LiiditSumAggregateInputType = {
    id?: true
  }

  export type LiiditMinAggregateInputType = {
    id?: true
    kayttajatunnus?: true
    liidi?: true
  }

  export type LiiditMaxAggregateInputType = {
    id?: true
    kayttajatunnus?: true
    liidi?: true
  }

  export type LiiditCountAggregateInputType = {
    id?: true
    kayttajatunnus?: true
    liidi?: true
    _all?: true
  }

  export type LiiditAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Liidit to aggregate.
     */
    where?: LiiditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Liidits to fetch.
     */
    orderBy?: LiiditOrderByWithRelationInput | LiiditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LiiditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Liidits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Liidits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Liidits
    **/
    _count?: true | LiiditCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LiiditAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LiiditSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LiiditMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LiiditMaxAggregateInputType
  }

  export type GetLiiditAggregateType<T extends LiiditAggregateArgs> = {
        [P in keyof T & keyof AggregateLiidit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLiidit[P]>
      : GetScalarType<T[P], AggregateLiidit[P]>
  }




  export type LiiditGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LiiditWhereInput
    orderBy?: LiiditOrderByWithAggregationInput | LiiditOrderByWithAggregationInput[]
    by: LiiditScalarFieldEnum[] | LiiditScalarFieldEnum
    having?: LiiditScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LiiditCountAggregateInputType | true
    _avg?: LiiditAvgAggregateInputType
    _sum?: LiiditSumAggregateInputType
    _min?: LiiditMinAggregateInputType
    _max?: LiiditMaxAggregateInputType
  }

  export type LiiditGroupByOutputType = {
    id: number
    kayttajatunnus: string
    liidi: string
    _count: LiiditCountAggregateOutputType | null
    _avg: LiiditAvgAggregateOutputType | null
    _sum: LiiditSumAggregateOutputType | null
    _min: LiiditMinAggregateOutputType | null
    _max: LiiditMaxAggregateOutputType | null
  }

  type GetLiiditGroupByPayload<T extends LiiditGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LiiditGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LiiditGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LiiditGroupByOutputType[P]>
            : GetScalarType<T[P], LiiditGroupByOutputType[P]>
        }
      >
    >


  export type LiiditSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kayttajatunnus?: boolean
    liidi?: boolean
  }, ExtArgs["result"]["liidit"]>

  export type LiiditSelectScalar = {
    id?: boolean
    kayttajatunnus?: boolean
    liidi?: boolean
  }


  export type $LiiditPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Liidit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kayttajatunnus: string
      liidi: string
    }, ExtArgs["result"]["liidit"]>
    composites: {}
  }


  type LiiditGetPayload<S extends boolean | null | undefined | LiiditDefaultArgs> = $Result.GetResult<Prisma.$LiiditPayload, S>

  type LiiditCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LiiditFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LiiditCountAggregateInputType | true
    }

  export interface LiiditDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Liidit'], meta: { name: 'Liidit' } }
    /**
     * Find zero or one Liidit that matches the filter.
     * @param {LiiditFindUniqueArgs} args - Arguments to find a Liidit
     * @example
     * // Get one Liidit
     * const liidit = await prisma.liidit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LiiditFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LiiditFindUniqueArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Liidit that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LiiditFindUniqueOrThrowArgs} args - Arguments to find a Liidit
     * @example
     * // Get one Liidit
     * const liidit = await prisma.liidit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LiiditFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LiiditFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Liidit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditFindFirstArgs} args - Arguments to find a Liidit
     * @example
     * // Get one Liidit
     * const liidit = await prisma.liidit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LiiditFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LiiditFindFirstArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Liidit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditFindFirstOrThrowArgs} args - Arguments to find a Liidit
     * @example
     * // Get one Liidit
     * const liidit = await prisma.liidit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LiiditFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LiiditFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Liidits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Liidits
     * const liidits = await prisma.liidit.findMany()
     * 
     * // Get first 10 Liidits
     * const liidits = await prisma.liidit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const liiditWithIdOnly = await prisma.liidit.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LiiditFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LiiditFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Liidit.
     * @param {LiiditCreateArgs} args - Arguments to create a Liidit.
     * @example
     * // Create one Liidit
     * const Liidit = await prisma.liidit.create({
     *   data: {
     *     // ... data to create a Liidit
     *   }
     * })
     * 
    **/
    create<T extends LiiditCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LiiditCreateArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Liidit.
     * @param {LiiditDeleteArgs} args - Arguments to delete one Liidit.
     * @example
     * // Delete one Liidit
     * const Liidit = await prisma.liidit.delete({
     *   where: {
     *     // ... filter to delete one Liidit
     *   }
     * })
     * 
    **/
    delete<T extends LiiditDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LiiditDeleteArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Liidit.
     * @param {LiiditUpdateArgs} args - Arguments to update one Liidit.
     * @example
     * // Update one Liidit
     * const liidit = await prisma.liidit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LiiditUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LiiditUpdateArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Liidits.
     * @param {LiiditDeleteManyArgs} args - Arguments to filter Liidits to delete.
     * @example
     * // Delete a few Liidits
     * const { count } = await prisma.liidit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LiiditDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LiiditDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Liidits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Liidits
     * const liidit = await prisma.liidit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LiiditUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LiiditUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Liidit.
     * @param {LiiditUpsertArgs} args - Arguments to update or create a Liidit.
     * @example
     * // Update or create a Liidit
     * const liidit = await prisma.liidit.upsert({
     *   create: {
     *     // ... data to create a Liidit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Liidit we want to update
     *   }
     * })
    **/
    upsert<T extends LiiditUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LiiditUpsertArgs<ExtArgs>>
    ): Prisma__LiiditClient<$Result.GetResult<Prisma.$LiiditPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Liidits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditCountArgs} args - Arguments to filter Liidits to count.
     * @example
     * // Count the number of Liidits
     * const count = await prisma.liidit.count({
     *   where: {
     *     // ... the filter for the Liidits we want to count
     *   }
     * })
    **/
    count<T extends LiiditCountArgs>(
      args?: Subset<T, LiiditCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LiiditCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Liidit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LiiditAggregateArgs>(args: Subset<T, LiiditAggregateArgs>): Prisma.PrismaPromise<GetLiiditAggregateType<T>>

    /**
     * Group by Liidit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LiiditGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LiiditGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LiiditGroupByArgs['orderBy'] }
        : { orderBy?: LiiditGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LiiditGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLiiditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Liidit model
   */
  readonly fields: LiiditFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Liidit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LiiditClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Liidit model
   */ 
  interface LiiditFieldRefs {
    readonly id: FieldRef<"Liidit", 'Int'>
    readonly kayttajatunnus: FieldRef<"Liidit", 'String'>
    readonly liidi: FieldRef<"Liidit", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Liidit findUnique
   */
  export type LiiditFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * Filter, which Liidit to fetch.
     */
    where: LiiditWhereUniqueInput
  }


  /**
   * Liidit findUniqueOrThrow
   */
  export type LiiditFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * Filter, which Liidit to fetch.
     */
    where: LiiditWhereUniqueInput
  }


  /**
   * Liidit findFirst
   */
  export type LiiditFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * Filter, which Liidit to fetch.
     */
    where?: LiiditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Liidits to fetch.
     */
    orderBy?: LiiditOrderByWithRelationInput | LiiditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Liidits.
     */
    cursor?: LiiditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Liidits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Liidits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Liidits.
     */
    distinct?: LiiditScalarFieldEnum | LiiditScalarFieldEnum[]
  }


  /**
   * Liidit findFirstOrThrow
   */
  export type LiiditFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * Filter, which Liidit to fetch.
     */
    where?: LiiditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Liidits to fetch.
     */
    orderBy?: LiiditOrderByWithRelationInput | LiiditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Liidits.
     */
    cursor?: LiiditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Liidits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Liidits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Liidits.
     */
    distinct?: LiiditScalarFieldEnum | LiiditScalarFieldEnum[]
  }


  /**
   * Liidit findMany
   */
  export type LiiditFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * Filter, which Liidits to fetch.
     */
    where?: LiiditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Liidits to fetch.
     */
    orderBy?: LiiditOrderByWithRelationInput | LiiditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Liidits.
     */
    cursor?: LiiditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Liidits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Liidits.
     */
    skip?: number
    distinct?: LiiditScalarFieldEnum | LiiditScalarFieldEnum[]
  }


  /**
   * Liidit create
   */
  export type LiiditCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * The data needed to create a Liidit.
     */
    data: XOR<LiiditCreateInput, LiiditUncheckedCreateInput>
  }


  /**
   * Liidit update
   */
  export type LiiditUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * The data needed to update a Liidit.
     */
    data: XOR<LiiditUpdateInput, LiiditUncheckedUpdateInput>
    /**
     * Choose, which Liidit to update.
     */
    where: LiiditWhereUniqueInput
  }


  /**
   * Liidit updateMany
   */
  export type LiiditUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Liidits.
     */
    data: XOR<LiiditUpdateManyMutationInput, LiiditUncheckedUpdateManyInput>
    /**
     * Filter which Liidits to update
     */
    where?: LiiditWhereInput
  }


  /**
   * Liidit upsert
   */
  export type LiiditUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * The filter to search for the Liidit to update in case it exists.
     */
    where: LiiditWhereUniqueInput
    /**
     * In case the Liidit found by the `where` argument doesn't exist, create a new Liidit with this data.
     */
    create: XOR<LiiditCreateInput, LiiditUncheckedCreateInput>
    /**
     * In case the Liidit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LiiditUpdateInput, LiiditUncheckedUpdateInput>
  }


  /**
   * Liidit delete
   */
  export type LiiditDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
    /**
     * Filter which Liidit to delete.
     */
    where: LiiditWhereUniqueInput
  }


  /**
   * Liidit deleteMany
   */
  export type LiiditDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Liidits to delete
     */
    where?: LiiditWhereInput
  }


  /**
   * Liidit without action
   */
  export type LiiditDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Liidit
     */
    select?: LiiditSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const KayttajaScalarFieldEnum: {
    id: 'id',
    kayttajatunnus: 'kayttajatunnus',
    salasana: 'salasana',
    admin: 'admin'
  };

  export type KayttajaScalarFieldEnum = (typeof KayttajaScalarFieldEnum)[keyof typeof KayttajaScalarFieldEnum]


  export const LiiditScalarFieldEnum: {
    id: 'id',
    kayttajatunnus: 'kayttajatunnus',
    liidi: 'liidi'
  };

  export type LiiditScalarFieldEnum = (typeof LiiditScalarFieldEnum)[keyof typeof LiiditScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type KayttajaWhereInput = {
    AND?: KayttajaWhereInput | KayttajaWhereInput[]
    OR?: KayttajaWhereInput[]
    NOT?: KayttajaWhereInput | KayttajaWhereInput[]
    id?: IntFilter<"Kayttaja"> | number
    kayttajatunnus?: StringFilter<"Kayttaja"> | string
    salasana?: StringFilter<"Kayttaja"> | string
    admin?: BoolFilter<"Kayttaja"> | boolean
  }

  export type KayttajaOrderByWithRelationInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    salasana?: SortOrder
    admin?: SortOrder
  }

  export type KayttajaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KayttajaWhereInput | KayttajaWhereInput[]
    OR?: KayttajaWhereInput[]
    NOT?: KayttajaWhereInput | KayttajaWhereInput[]
    kayttajatunnus?: StringFilter<"Kayttaja"> | string
    salasana?: StringFilter<"Kayttaja"> | string
    admin?: BoolFilter<"Kayttaja"> | boolean
  }, "id">

  export type KayttajaOrderByWithAggregationInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    salasana?: SortOrder
    admin?: SortOrder
    _count?: KayttajaCountOrderByAggregateInput
    _avg?: KayttajaAvgOrderByAggregateInput
    _max?: KayttajaMaxOrderByAggregateInput
    _min?: KayttajaMinOrderByAggregateInput
    _sum?: KayttajaSumOrderByAggregateInput
  }

  export type KayttajaScalarWhereWithAggregatesInput = {
    AND?: KayttajaScalarWhereWithAggregatesInput | KayttajaScalarWhereWithAggregatesInput[]
    OR?: KayttajaScalarWhereWithAggregatesInput[]
    NOT?: KayttajaScalarWhereWithAggregatesInput | KayttajaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kayttaja"> | number
    kayttajatunnus?: StringWithAggregatesFilter<"Kayttaja"> | string
    salasana?: StringWithAggregatesFilter<"Kayttaja"> | string
    admin?: BoolWithAggregatesFilter<"Kayttaja"> | boolean
  }

  export type LiiditWhereInput = {
    AND?: LiiditWhereInput | LiiditWhereInput[]
    OR?: LiiditWhereInput[]
    NOT?: LiiditWhereInput | LiiditWhereInput[]
    id?: IntFilter<"Liidit"> | number
    kayttajatunnus?: StringFilter<"Liidit"> | string
    liidi?: StringFilter<"Liidit"> | string
  }

  export type LiiditOrderByWithRelationInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    liidi?: SortOrder
  }

  export type LiiditWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LiiditWhereInput | LiiditWhereInput[]
    OR?: LiiditWhereInput[]
    NOT?: LiiditWhereInput | LiiditWhereInput[]
    kayttajatunnus?: StringFilter<"Liidit"> | string
    liidi?: StringFilter<"Liidit"> | string
  }, "id">

  export type LiiditOrderByWithAggregationInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    liidi?: SortOrder
    _count?: LiiditCountOrderByAggregateInput
    _avg?: LiiditAvgOrderByAggregateInput
    _max?: LiiditMaxOrderByAggregateInput
    _min?: LiiditMinOrderByAggregateInput
    _sum?: LiiditSumOrderByAggregateInput
  }

  export type LiiditScalarWhereWithAggregatesInput = {
    AND?: LiiditScalarWhereWithAggregatesInput | LiiditScalarWhereWithAggregatesInput[]
    OR?: LiiditScalarWhereWithAggregatesInput[]
    NOT?: LiiditScalarWhereWithAggregatesInput | LiiditScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Liidit"> | number
    kayttajatunnus?: StringWithAggregatesFilter<"Liidit"> | string
    liidi?: StringWithAggregatesFilter<"Liidit"> | string
  }

  export type KayttajaCreateInput = {
    kayttajatunnus: string
    salasana: string
    admin?: boolean
  }

  export type KayttajaUncheckedCreateInput = {
    id?: number
    kayttajatunnus: string
    salasana: string
    admin?: boolean
  }

  export type KayttajaUpdateInput = {
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    salasana?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KayttajaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    salasana?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KayttajaUpdateManyMutationInput = {
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    salasana?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KayttajaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    salasana?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LiiditCreateInput = {
    kayttajatunnus: string
    liidi: string
  }

  export type LiiditUncheckedCreateInput = {
    id?: number
    kayttajatunnus: string
    liidi: string
  }

  export type LiiditUpdateInput = {
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    liidi?: StringFieldUpdateOperationsInput | string
  }

  export type LiiditUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    liidi?: StringFieldUpdateOperationsInput | string
  }

  export type LiiditUpdateManyMutationInput = {
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    liidi?: StringFieldUpdateOperationsInput | string
  }

  export type LiiditUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kayttajatunnus?: StringFieldUpdateOperationsInput | string
    liidi?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type KayttajaCountOrderByAggregateInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    salasana?: SortOrder
    admin?: SortOrder
  }

  export type KayttajaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KayttajaMaxOrderByAggregateInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    salasana?: SortOrder
    admin?: SortOrder
  }

  export type KayttajaMinOrderByAggregateInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    salasana?: SortOrder
    admin?: SortOrder
  }

  export type KayttajaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LiiditCountOrderByAggregateInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    liidi?: SortOrder
  }

  export type LiiditAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LiiditMaxOrderByAggregateInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    liidi?: SortOrder
  }

  export type LiiditMinOrderByAggregateInput = {
    id?: SortOrder
    kayttajatunnus?: SortOrder
    liidi?: SortOrder
  }

  export type LiiditSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use KayttajaDefaultArgs instead
     */
    export type KayttajaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KayttajaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LiiditDefaultArgs instead
     */
    export type LiiditArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LiiditDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}